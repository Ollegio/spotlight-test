openapi: 3.0.0
info:
  title: Screens
  version: 1.0.0
  description: api documentation
  contact:
    email: o.gnusarev@truemachine.ru
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Ollegio/Screens/1.0.0
  - url: 'http://localhost:8000/api'
  - url: 'https://screens-ftd-backend.truemachine.ru/api'
  - url: 'https://screens-ftd-backend-dev.truemachine.ru/api'
  - url: 'https://screens-ftd-backend-test.truemachine.ru/api'
paths:
  '/displays/{id}/layout':
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
    post:
      summary: Установить раскладку
      tags:
        - displays
      responses:
        '200':
          description: OK
      description: описание
      operationId: 'DisplayController::layout'
  /auth/login:
    post:
      tags:
        - auth
      summary: Get a JWT via given credentials.
      operationId: 'AuthController::login'
      responses:
        '200':
          description: OK
      description: описание
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
        description: ''
        required: true
  /auth/me:
    get:
      tags:
        - auth
      summary: Get the authenticated User.
      operationId: 'AuthController::me'
      responses:
        '200':
          description: OK
      description: описание
  /auth/logout:
    post:
      tags:
        - auth
      summary: Log the user out (Invalidate the token).
      operationId: 'AuthController::logout'
      responses:
        '200':
          description: OK
      description: описание
  /auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh a token.
      operationId: 'AuthController::refresh'
      responses:
        '200':
          description: OK
      description: описание
  /cities:
    get:
      tags:
        - cities
      summary: Получить список городов
      operationId: 'CityController::index'
      parameters:
        - name: stations
          in: query
          schema:
            type: integer
          description: 'Если stations=1, то подгружаются станции'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/CityWithStations'
      description: описание
    post:
      tags:
        - cities
      summary: Store a newly created resource in storage.
      operationId: 'CityController::store'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              title: f
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/City'
      description: описание
  /cities/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - cities
      summary: Информация о городе
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
    put:
      tags:
        - cities
      summary: Информация о городе
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
    delete:
      tags:
        - cities
      summary: Информация о городе
      responses:
        '200':
          description: OK
  /stations:
    get:
      tags:
        - stations
      summary: Получить список станций
      operationId: 'StationController::index'
      parameters:
        - name: stations
          in: query
          schema:
            type: integer
          description: 'Если stations=1, то подгружаются станции'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
      description: описание
    post:
      tags:
        - stations
      summary: Store a newly created resource in storage.
      operationId: 'StationController::store'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              title: f
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
      description: описание
  /stations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - stations
      summary: Информация о станции
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
    put:
      tags:
        - stations
      summary: Изменить станцию
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
    delete:
      tags:
        - stations
      summary: Удалить станцию
      responses:
        '200':
          description: OK
  /displays:
    get:
      tags:
        - displays
      summary: Display a listing of the resource.
      operationId: 'DisplayController::index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Display'
      description: описание
    put:
      tags:
        - displays
      summary: Update the specified resource in storage.
      operationId: 'DisplayController::update'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Display'
      description: описание
    post:
      tags:
        - displays
      summary: Store a newly created resource in storage.
      operationId: 'DisplayController::store'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Display'
      description: описание
  '/displays/{id}':
    get:
      tags:
        - displays
      summary: Display the specified resource.
      operationId: 'DisplayController::show'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Display'
      description: описание
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/displays/{id}/status':
    get:
      tags:
        - displays
      summary: Display status.
      operationId: 'DisplayController::status'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisplayInfo'
      description: описание
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/displays/{id}/screenshot/update':
    get:
      tags:
        - displays
      summary: Update screenshot and get as image
      operationId: 'DisplayController::screenshotUpdate'
      responses:
        '200':
          description: OK
      description: описание
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/displays/{id}/screenshot':
    get:
      description: скриншот
      tags:
        - displays
      summary: Get latest screenshot as image
      operationId: 'DisplayController::screenshot'
      responses:
        '200':
          description: OK
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/displays/{id}/config/update':
    get:
      description: Обновить файл конфигурации
      tags:
        - displays
      summary: Обновить файл конфигурации
      operationId: 'DisplayController::configUpdate'
      responses:
        '200':
          description: OK
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/displays/{id}/config':
    get:
      tags:
        - displays
      summary: Получить последний файл конфигурации
      operationId: 'DisplayController::config'
      responses:
        '200':
          description: OK
      description: Получить последний файл конфигурации
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  '/displays/{id}/lock':
    get:
      tags:
        - displays
      summary: Заблокировать/разблокировать экран
      operationId: 'DisplayController::lock'
      responses:
        '200':
          description: OK
      description: передай где-нибудь параметр lock
    parameters:
      - schema:
          type: integer
        name: id
        in: path
        required: true
  /stations/{id}/displays:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
    get:
      tags:
        - stations
      summary: Получить дисплеи на данной станции
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Display'
  /hello:
    get:
      tags:
        - hello
      summary: get sample json
      description: get sample json
      operationId: 'HelloController::index'
      responses:
        '200':
          description: OK
    post:
      tags:
        - hello
      summary: get sample json
      description: get sample json
      operationId: 'HelloController::commandWithData'
      responses:
        '200':
          description: OK
  /users/roles:
    get:
      tags:
        - admin_users
      summary: Список ролей пользователей
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /users:
    get:
      tags:
        - admin_users
      summary: Список пользователей
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
        - admin_users
      summary: Добавить пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      tags:
        - admin_users
      summary: Информация о пользователе
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - admin_users
      summary: Редактировать пользователя
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - admin_users
      summary: Удалить пользователя
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
components:
  schemas:
    CityWithStations:
      title: City
      type: object
      properties:
        id:
          description: Class City
          example: 1
          type: integer
        name:
          description: Class City
          example: Ульяновск
          type: string
        stations:
          description: Class City
          type: array
          items:
            $ref: '#/components/schemas/Station'
    City:
      title: City
      type: object
      properties:
        id:
          description: Class City
          example: 1
          type: integer
        name:
          description: Class City
          example: Ульяновск
          type: string
    Display:
      title: Display
      type: object
      properties:
        latitude:
          example: 13.37
          type: number
        longitude:
          example: 3.1415
          type: number
        ident:
          type: string
        password:
          type: string
    DisplayInfo:
      properties:
        firmware_info: {}
      type: object
    Station:
      title: Station
      type: object
      x-examples: {}
      properties:
        name:
          description: Class Station
          example: Ульяновск-Центральный
          type: string
        address:
          description: Class Station
          example: Улица Пушкина дом Колотушкина
          type: string
        id:
          type: integer
    User:
      title: User
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          $ref: '#/components/schemas/Role'
    Role:
      title: Role
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
  securitySchemes: {}
tags:
  - name: auth